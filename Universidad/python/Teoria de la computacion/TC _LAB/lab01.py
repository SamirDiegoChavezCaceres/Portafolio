# -*- coding: utf-8 -*-
"""Lab01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WCSD2HHky37D4kgKLVKHIy3SWxIsLyqS

Instalación de Python: https://youtu.be/DAdRO6ByBoU
"""

from re import A


print('Hola mundo')

type("Hola mundo")

type(17)

print(type('Ese es un string.') )
print(type("Y ese tambien es un string.") )
print(type("""y ese.""") )
print(type('''incluso ese...''') )

print('''"Oh no", exclamó ella, "La bicicleta está malograda!"''')

print(42, 17, 56, 34, 11, 4.35, 32)
print(3.4, "hello", 45)

"""Ejemplo de alfabeto:

*   Σ= {0,1} en matematica.

En Python, este alfabeto será {"0","1"}
"""

{"0","1"}

"""Ejemplos de strings o cadenas: ab,  cde. 

En Python: "ab", "cde"
Concatenación de cadenas en Python: "ab" + "cde"
"""

"ab" + "cde"

"""*   $\epsilon$ab = ab$\epsilon$ = ab
*   En Python, "" + "ab" = "ab" + "" = "ab".

Exponenciación: ahora que estamos viendo la concatenación como multiplicación, y dado que es bastante natural ver la multiplicación repetida como exponenciación, introduciremos la idea de exponenciación en el álgebra de cadenas, de la siguiente manera:

• Para un símbolo a, tenemos a$^2$ = aa, a$^3$ = aaa, etc.

• Para la cadena ab, tenemos (ab)$^2$ = abab y (ab)$^3$ = ababab.

• Como otro ejemplo, (abacaea)$^2$ = abacaeaabacaea.

• En Python, podemos escribirlos de la siguiente manera:

*  "a" * 2 = "aa"
*  "a" * 3 = "aaa"
*  "ab" * 2 = "abab"
*  "ab" * 3 = "ababab"
*  "abacaea" * 2 = "abacaeaabacaea"
"""
#
#print( "a" * 2 )
#print( "a" * 3 )
#print( "ab" * 2 )
#print( "ab" * 3 )
#print( "abacaea" * 2 )
#
"""Un Lenguaje es un conjunto de cadenas (posiblemente infinito donde cada cadena es finita).
Dos ejemplos:

• LenguajeVacío = ∅;

En Python, LenguajeVacío = set({}) (o incluso set())

• Mylang = {",aa,abc}
En Python, MyLang = {"", "aa", "abc"}
"""



"""Ejemplo de lenguaje: Todas las cadenas de "repeticiones sin sentido" del patrón 01: L01Rep = {ϵ,01,0101,010101,01010101,...}

• En Python con una aproximación: {"01"*i for i in range (10)}
"""

#{"01"*i for i in range (10)}

A = set(['ab', 'bc'])
B = set(['11', 'ab', '22'])
def cat(L1,L2):
  """Concatenation of two languages.
    If A = set(['ab', 'bc']) is one language,
    and B = set(['11', 'ab', '22']) is another language,
    then cat(A,B) returns set(['abab', 'bc22', 'ab11', 'ab22, 'bcab', 'bc11'])
  """
  return set({x+y for x in L1 for y in L2})

#print(cat(A,B))
L1={"01"*i for i in range (10)}
#print(L1)
"""Escriba el conjunto por comprensión en Python que genera el conjunto de cadenas siguiente:
{'', '((((()))))', '(((())))', '()', '((()))', '(())'}
Queremos que este conjunto incluya todas las cadenas que consisten en n paréntesis izquierdo seguido de n paréntesis derecho para 0 <= n <= 5. Tenga en cuenta que para n = 0, estamos generando (o '' en Python).
"""

L2={"("*i+")"*i for i in range (6)}
print(L2)